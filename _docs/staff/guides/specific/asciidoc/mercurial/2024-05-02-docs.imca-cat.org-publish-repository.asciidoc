= Detailed Guide to Publishing with GitLab CI

== Introduction

Publishing your website or documentation using GitLab CI ensures a streamlined and automated process, reducing manual errors and saving time. This guide provides step-by-step instructions on how to publish your content using the provided GitLab CI configuration.

== Key Concepts

Before proceeding, let's understand some key concepts:

- **GitLab CI/CD**: GitLab Continuous Integration/Continuous Deployment (CI/CD) pipelines automate the process of building, testing, and deploying your code.
- **Jekyll**: Jekyll is a static site generator used to build static websites or documentation from simple text files.
- **SSH**: Secure Shell (SSH) is a cryptographic network protocol used for secure communication between a client and a server.
- **Rsync**: Rsync is a powerful file synchronization tool that efficiently transfers and synchronizes files between directories or servers.

== Workflow Steps

Follow these steps to publish your content using GitLab CI:

1. **Configure GitLab CI/CD**:

   Ensure that your GitLab project is configured to use CI/CD pipelines. Add the provided `.gitlab-ci.yml` file to the root of your project repository.

2. **Build Stage**:

   In the `build` stage of the CI pipeline, the project dependencies are installed, and Jekyll builds your website or documentation. The resulting files are stored in the `public` directory.

3. **Test Stage**:

   In the `test` stage, the built files are deployed to a test environment for further validation. This stage helps ensure that the generated content functions correctly before deploying to production.

4. **Deploy Stage**:

   The `deploy` stage is responsible for deploying the built files to the production environment. This stage uses SSH to connect to the deployment server and rsync to synchronize the files.

5. **SSH Configuration**:

   Ensure that SSH keys are properly configured and added to the GitLab CI/CD settings. The private SSH key (`PRIVATE_KEY`) should be securely stored and accessible to the CI/CD pipeline.

6. **Update Configuration Variables**:

   Modify the variables in the `.gitlab-ci.yml` file to match your environment. Update variables such as `SERVER_NAME`, `CONNECTION_STR`, `PROJECT_NAME`, `DEPLOY_PATH`, and `PRIVATE_KEY` according to your server configuration.

7. **Run the Pipeline**:

   Trigger the CI/CD pipeline by pushing changes to your GitLab repository. GitLab will automatically run the pipeline, including the build, test, and deploy stages.

8. **Monitor Deployment**:

   Monitor the pipeline execution in the GitLab CI/CD interface. Verify that each stage completes successfully, and review any error messages or warnings.

9. **Access the Published Content**:

   Once the pipeline completes successfully, access your published website or documentation using the specified `SERVER_NAME` or deployment server URL.

== Conclusion

By following this detailed guide and utilizing the provided GitLab CI configuration, you can efficiently publish your website or documentation with confidence. GitLab CI/CD automates the deployment process, ensuring consistent and reliable results across environments. With proper configuration and monitoring, you can streamline your publishing workflow and focus on creating quality content.